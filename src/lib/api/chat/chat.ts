/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Interstellar API
 * Interstellar API Documentation
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ListMessageResponseDTO,
  MessageControllerChatParams,
  MessageControllerListMessagesParams,
  MessageDownvoteRequestDTO,
  MessageUpvoteRequestDTO,
  SuccessResponse,
} from "../../interfaces";

import { customInstance } from ".././mutator";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Send a message to the chatbot
 * @summary Send a message to the chatbot
 */
export const messageControllerChat = (
  conversationId: string,
  params: MessageControllerChatParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<string>(
    {
      url: `/api/v1/chat/sse/${conversationId}`,
      method: "GET",
      params,
      signal,
    },
    options
  );
};

export const getMessageControllerChatQueryKey = (
  conversationId?: string,
  params?: MessageControllerChatParams
) => {
  return [
    `/api/v1/chat/sse/${conversationId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getMessageControllerChatQueryOptions = <
  TData = Awaited<ReturnType<typeof messageControllerChat>>,
  TError = unknown,
>(
  conversationId: string,
  params: MessageControllerChatParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messageControllerChat>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getMessageControllerChatQueryKey(conversationId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof messageControllerChat>>
  > = ({ signal }) =>
    messageControllerChat(conversationId, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!conversationId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof messageControllerChat>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MessageControllerChatQueryResult = NonNullable<
  Awaited<ReturnType<typeof messageControllerChat>>
>;
export type MessageControllerChatQueryError = unknown;

export function useMessageControllerChat<
  TData = Awaited<ReturnType<typeof messageControllerChat>>,
  TError = unknown,
>(
  conversationId: string,
  params: MessageControllerChatParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messageControllerChat>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof messageControllerChat>>,
          TError,
          Awaited<ReturnType<typeof messageControllerChat>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMessageControllerChat<
  TData = Awaited<ReturnType<typeof messageControllerChat>>,
  TError = unknown,
>(
  conversationId: string,
  params: MessageControllerChatParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messageControllerChat>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof messageControllerChat>>,
          TError,
          Awaited<ReturnType<typeof messageControllerChat>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMessageControllerChat<
  TData = Awaited<ReturnType<typeof messageControllerChat>>,
  TError = unknown,
>(
  conversationId: string,
  params: MessageControllerChatParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messageControllerChat>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Send a message to the chatbot
 */

export function useMessageControllerChat<
  TData = Awaited<ReturnType<typeof messageControllerChat>>,
  TError = unknown,
>(
  conversationId: string,
  params: MessageControllerChatParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messageControllerChat>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMessageControllerChatQueryOptions(
    conversationId,
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get messages for a conversation
 * @summary Get messages for a conversation
 */
export const messageControllerListMessages = (
  conversationId: string,
  params: MessageControllerListMessagesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<ListMessageResponseDTO>(
    { url: `/api/v1/chat/${conversationId}`, method: "GET", params, signal },
    options
  );
};

export const getMessageControllerListMessagesQueryKey = (
  conversationId?: string,
  params?: MessageControllerListMessagesParams
) => {
  return [
    `/api/v1/chat/${conversationId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getMessageControllerListMessagesQueryOptions = <
  TData = Awaited<ReturnType<typeof messageControllerListMessages>>,
  TError = unknown,
>(
  conversationId: string,
  params: MessageControllerListMessagesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messageControllerListMessages>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getMessageControllerListMessagesQueryKey(conversationId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof messageControllerListMessages>>
  > = ({ signal }) =>
    messageControllerListMessages(
      conversationId,
      params,
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    enabled: !!conversationId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof messageControllerListMessages>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MessageControllerListMessagesQueryResult = NonNullable<
  Awaited<ReturnType<typeof messageControllerListMessages>>
>;
export type MessageControllerListMessagesQueryError = unknown;

export function useMessageControllerListMessages<
  TData = Awaited<ReturnType<typeof messageControllerListMessages>>,
  TError = unknown,
>(
  conversationId: string,
  params: MessageControllerListMessagesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messageControllerListMessages>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof messageControllerListMessages>>,
          TError,
          Awaited<ReturnType<typeof messageControllerListMessages>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMessageControllerListMessages<
  TData = Awaited<ReturnType<typeof messageControllerListMessages>>,
  TError = unknown,
>(
  conversationId: string,
  params: MessageControllerListMessagesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messageControllerListMessages>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof messageControllerListMessages>>,
          TError,
          Awaited<ReturnType<typeof messageControllerListMessages>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMessageControllerListMessages<
  TData = Awaited<ReturnType<typeof messageControllerListMessages>>,
  TError = unknown,
>(
  conversationId: string,
  params: MessageControllerListMessagesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messageControllerListMessages>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get messages for a conversation
 */

export function useMessageControllerListMessages<
  TData = Awaited<ReturnType<typeof messageControllerListMessages>>,
  TError = unknown,
>(
  conversationId: string,
  params: MessageControllerListMessagesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messageControllerListMessages>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMessageControllerListMessagesQueryOptions(
    conversationId,
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Upvote a message
 * @summary Upvote a message
 */
export const messageControllerUpvoteMessage = (
  messageId: string,
  messageUpvoteRequestDTO: MessageUpvoteRequestDTO,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<SuccessResponse>(
    {
      url: `/api/v1/chat/upvote/${messageId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: messageUpvoteRequestDTO,
    },
    options
  );
};

export const getMessageControllerUpvoteMessageMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof messageControllerUpvoteMessage>>,
    TError,
    { messageId: string; data: MessageUpvoteRequestDTO },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof messageControllerUpvoteMessage>>,
  TError,
  { messageId: string; data: MessageUpvoteRequestDTO },
  TContext
> => {
  const mutationKey = ["messageControllerUpvoteMessage"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof messageControllerUpvoteMessage>>,
    { messageId: string; data: MessageUpvoteRequestDTO }
  > = (props) => {
    const { messageId, data } = props ?? {};

    return messageControllerUpvoteMessage(messageId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MessageControllerUpvoteMessageMutationResult = NonNullable<
  Awaited<ReturnType<typeof messageControllerUpvoteMessage>>
>;
export type MessageControllerUpvoteMessageMutationBody =
  MessageUpvoteRequestDTO;
export type MessageControllerUpvoteMessageMutationError = unknown;

/**
 * @summary Upvote a message
 */
export const useMessageControllerUpvoteMessage = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof messageControllerUpvoteMessage>>,
      TError,
      { messageId: string; data: MessageUpvoteRequestDTO },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof messageControllerUpvoteMessage>>,
  TError,
  { messageId: string; data: MessageUpvoteRequestDTO },
  TContext
> => {
  const mutationOptions =
    getMessageControllerUpvoteMessageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Downvote a message
 * @summary Downvote a message
 */
export const messageControllerDownvoteMessage = (
  messageId: string,
  messageDownvoteRequestDTO: MessageDownvoteRequestDTO,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<SuccessResponse>(
    {
      url: `/api/v1/chat/downvote/${messageId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: messageDownvoteRequestDTO,
    },
    options
  );
};

export const getMessageControllerDownvoteMessageMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof messageControllerDownvoteMessage>>,
    TError,
    { messageId: string; data: MessageDownvoteRequestDTO },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof messageControllerDownvoteMessage>>,
  TError,
  { messageId: string; data: MessageDownvoteRequestDTO },
  TContext
> => {
  const mutationKey = ["messageControllerDownvoteMessage"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof messageControllerDownvoteMessage>>,
    { messageId: string; data: MessageDownvoteRequestDTO }
  > = (props) => {
    const { messageId, data } = props ?? {};

    return messageControllerDownvoteMessage(messageId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MessageControllerDownvoteMessageMutationResult = NonNullable<
  Awaited<ReturnType<typeof messageControllerDownvoteMessage>>
>;
export type MessageControllerDownvoteMessageMutationBody =
  MessageDownvoteRequestDTO;
export type MessageControllerDownvoteMessageMutationError = unknown;

/**
 * @summary Downvote a message
 */
export const useMessageControllerDownvoteMessage = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof messageControllerDownvoteMessage>>,
      TError,
      { messageId: string; data: MessageDownvoteRequestDTO },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof messageControllerDownvoteMessage>>,
  TError,
  { messageId: string; data: MessageDownvoteRequestDTO },
  TContext
> => {
  const mutationOptions =
    getMessageControllerDownvoteMessageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
